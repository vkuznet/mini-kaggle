<div class="is-center is-50">
    <b>{{.Type}} Status Board</b> <small id="sorting">(to sort click on column name)</small>
    <table class="is-striped" id="dashboard">
        <thead>
            <tr>
                <th onclick="sortTable(0)"><button class="button is-tertiary is-small">Placement</button></th>
                <th onclick="sortTable(1)"><button class="button is-tertiary is-small">Submission</button></th>
                <th onclick="sortTable(2)"><button class="button is-tertiary is-small">Score</button></th>
            </tr>
        </thead>
        <tbody>
{{range $k, $v := .Records}}
            <tr>
                <td>{{incFunc $k}}</td>
                <td>{{$v.Name}}</td>
                <td>{{$v.Score}}</td>
            </tr>
{{end}}
        </tbody>
    </table>
</div>

<script>
// https://www.w3schools.com/howto/howto_js_sort_table.asp
function sortTable(n) {
  var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
  table = document.getElementById("dashboard");
  switching = true;
  // Set the sorting direction to ascending:
  dir = "asc"; 
  /* Make a loop that will continue until
  no switching has been done: */
  while (switching) {
    // Start by saying: no switching is done:
    switching = false;
    rows = table.rows;
    /* Loop through all table rows (except the
    first, which contains table headers): */
    for (i = 1; i < (rows.length - 1); i++) {
      // Start by saying there should be no switching:
      shouldSwitch = false;
      /* Get the two elements you want to compare,
      one from current row and one from the next: */
      x = rows[i].getElementsByTagName("TD")[n];
      y = rows[i + 1].getElementsByTagName("TD")[n];
      /* Check if the two rows should switch place,
      based on the direction, asc or desc: */
      if (dir == "asc") {
        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      } else if (dir == "desc") {
        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
          // If so, mark as a switch and break the loop:
          shouldSwitch = true;
          break;
        }
      }
    }
    if (shouldSwitch) {
      /* If a switch has been marked, make the switch
      and mark that a switch has been done: */
      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
      switching = true;
      // Each time a switch is done, increase this count by 1:
      switchcount ++; 
    } else {
      /* If no switching has been done AND the direction is "asc",
      set the direction to "desc" and run the while loop again. */
      if (switchcount == 0 && dir == "asc") {
        dir = "desc";
        switching = true;
      }
    }
    sorting = document.getElementById("sorting");
    if (n == 0) {
        sorting.innerHTML = "(sort by Placement, in " + dir + " order)";
    } else if (n == 1) {
        sorting.innerHTML = "(sort by Submission in " + dir + " order)";
    } else {
        sorting.innerHTML = "(sort by Score in " + dir + " order)";
    }

  }
}
</script>
